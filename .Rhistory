fairness_tree=read_csv("G://My Drive//E_AI//responsible_mlops_R//config//fairness_tree.csv")
library(tidyverse)
fairness_tree=read_csv("G://My Drive//E_AI//responsible_mlops_R//config//fairness_tree.csv")
fairness_tree
devtools::use_data(fairness_tree)
citation("tidyverse")
? use_data
use_data(fairness_tree)
library(usethis)
use_data(fairness_tree)
usethis::use_data(fairness_tree)
usethis::use_data(fairness_tree)
usethis::use_data
check_is_package("use_data()")
usethis::check_is_package("use_data()")
devtools::check_is_package("use_data()")
?? check_is_package
check_is_package
usethis::use_data(fairness_tree)
usethis::use_data(fairness_tree)
usethis::use_data(fairness_tree)
mitigation_mapping=read_csv("G://My Drive//E_AI//responsible_mlops_R//config//mitigation_mapping.csv")
usethis::use_data(migitation_mapping)
usethis::use_data(mitigation_mapping)
devtools::document()
devtools::document()
devtools::document(overwrite=T)
devtools::document(overwrite=T)
devtools::document()
rm(fairness_tree)
rm(mitigation_mapping)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
fairness_tree=read_csv("G://My Drive//E_AI//responsible_mlops_R//config//fairness_tree.csv")
mitigation_mapping=read_csv("G://My Drive//E_AI//responsible_mlops_R//config//mitigation_mapping.csv")
library(tidyverse)
fairness_tree=read_csv("G://My Drive//E_AI//responsible_mlops_R//config//fairness_tree.csv")
mitigation_mapping=read_csv("G://My Drive//E_AI//responsible_mlops_R//config//mitigation_mapping.csv")
usethis::use_data(fairness_tree)
usethis::use_data(mitigation_mapping)
library(responsibR)
responsibR::fairness_tree_metric()
responsibR::fairness_tree_metric(fairness_tree)
fairness_tree
library(responsibR)
library(responsibR)
install.packages('responibR')
install.packages('responsibR')
install.packages("responsibR")
library(responsibR)
library(responsibR)
install.packages('responsibR')
library(responsibR)
library(responsibR)
library("responsibR")
usethat::use_vignette("introduction")
library(usethat)
install.packages('usethat')
library(usethat)
usethat::use_vignette("introduction")
devtools::use_vignette("introduction")
usethis::use_data(fairness_tree)
usethis::use_vignette("introduction")
devtools::load_all()
library(responsibR)
fairness_tree
fairness_tree_metric()
Y
fairness_tree_metric()
fairness_tree
fairness_tree_metric()
fairness_tree_metric
?? responsibR
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(responsibR)
fairness_tree=read_csv("G://My Drive//E_AI//responsible_mlops_R//config//fairness_tree_v2.csv")
library(tidyverse)
fairness_tree=read_csv("G://My Drive//E_AI//responsible_mlops_R//config//fairness_tree_v2.csv")
usethis::use_data(fairness_tree)
usethis::use_data(fairness_tree,overwrite = T)
? fairness_tree metric
getwd()
document()
library(roxygen2)
document()
load("G:/My Drive/E_AI/responsibR/data/fairness_tree.rda")
fairness_tree
fairness_tree
fairness_tree=read_csv("G://My Drive//E_AI//responsible_mlops_R//config//fairness_tree_v2.csv")
usethis::use_data(fairness_tree,overwrite = T)
mitigation_mapping
devtools::document()
devtools::document()
getwd()
data_clean=readRDS("../data_clean.rds")
usethis::use_data(data_clean)
devtools::load_all()
devtools::document()
#' Model Explain
#'
#' This function outputs fairness metric scores based on a trained model and specified fairness metric.
#' @export
model_explain <- function(ml_model_trained, data_input, target_var){
# model_explainer <- DALEX::explain(ml_model_trained, data = training_data[, -1], y = training_data$readmitted)
model_explainer <- DALEX::explain(ml_model_trained, data = data_input[, -1],
y = get(target_var[1], data_input), colorize = FALSE)
results = list("explain" = model_explainer)
return(results)
}
install.packages(xfun)
install.packages('xfun')
devtools::document()
devtools::document()
devtools::document()
